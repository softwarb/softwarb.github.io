{"title":"Events","description":"Events","url":"/docs/events","contributors":["jthoms1"],"headings":[{"id":"events","level":1,"text":"Events"},{"id":"event-decorator","level":2,"text":"Event Decorator"},{"id":"listen-decorator","level":2,"text":"Listen Decorator"},{"id":"using-events-in-jsx","level":2,"text":"Using events in JSX"},{"id":"listening-events-from-a-non-jsx-element","level":2,"text":"Listening events from a non-JSX element"}],"srcPath":"./src/docs/components/events.md","content":"\n<h1 id=\"events\">\n  \n  Events\n  \n</h1>\n<p>There is <strong>NOT</strong> such a thing as <em>stencil events</em>, instead, Stencil encourages the use of <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events\">DOM events</a>.\nHowever, Stencil does provide an API to specify the events a component can emit, and the events a component listens to. It does so with the <code>Event()</code> and <code>Listen()</code> decorators.</p>\n\n<h2 id=\"event-decorator\">\n  <a class=\"heading-link\" href=\"#event-decorator\"><app-icon name=\"link\"></app-icon>\n  Event Decorator\n  </a>\n</h2>\n<p>Components can emit data and events using the Event Emitter decorator.</p>\n<p>To dispatch <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\">Custom DOM events</a> for other components to handle, use the <code>@Event()</code> decorator.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Event<span class=\"token punctuation\">,</span> EventEmitter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoList</span> <span class=\"token punctuation\">{</span>\n\n  @<span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> todoCompleted<span class=\"token punctuation\">:</span> EventEmitter<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">todoCompletedHandler</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">:</span> Todo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoCompleted<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <p>The code above will dispatch a custom DOM event called <code>todoCompleted</code>.</p>\n<p>The <code>Event()</code> decorator optionally accepts an options object to shape the behavior of dispatched events. The options and defaults are described below</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Event<span class=\"token punctuation\">,</span> EventEmitter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoList</span> <span class=\"token punctuation\">{</span>\n\n  @<span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/*\n     * A string custom event name to override the default\n     */</span>\n    eventName<span class=\"token punctuation\">:</span> <span class=\"token string\">'todoCompleted'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/*\n     * A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.\n     */</span>\n    composed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/*\n     * A Boolean indicating whether the event is cancelable\n     */</span>\n    cancelable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/*\n     * A Boolean indicating whether the event bubbles up through the DOM or not.\n     */</span>\n    bubbles<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> todoCompleted<span class=\"token punctuation\">:</span> EventEmitter<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">todoCompletedHandler</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">:</span> Todo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoCompleted<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  \n<h2 id=\"listen-decorator\">\n  <a class=\"heading-link\" href=\"#listen-decorator\"><app-icon name=\"link\"></app-icon>\n  Listen Decorator\n  </a>\n</h2>\n<p>The <code>Listen()</code> decorator is for handling events dispatched from <code>@Events</code>.</p>\n<p>In the example below, assume that a child component, <code>TodoList</code>, emits a <code>todoCompleted</code> event using the <code>EventEmitter</code>.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Listen <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoApp</span> <span class=\"token punctuation\">{</span>\n\n  @<span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todoCompleted'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">todoCompletedHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">:</span> CustomEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Received the custom todoCompleted event: '</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>detail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <p>Handlers can also be registered for an event on a specific element.\nThis is useful for listening to application-wide events.\nIn the example below, we&#39;re going to listen for the scroll event.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Listen <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoList</span> <span class=\"token punctuation\">{</span>\n\n  @<span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'window:scroll'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">handleScroll</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the body was scrolled'</span><span class=\"token punctuation\">,</span> ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <p>For keyboard events, you can use the standard <code>keydown</code> event in <code>@Listen()</code> and then figure out the key code, or some constants Stencil provides.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\">@<span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keydown'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">handleKeyDown</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">:</span> KeyboardEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'ArrowDown'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'down arrow pressed'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <p>More info on event key strings can be found in the <a href=\"https://www.w3.org/TR/uievents-key/#named-key-attribute-values\">w3c spec</a>;</p>\n\n<h2 id=\"using-events-in-jsx\">\n  <a class=\"heading-link\" href=\"#using-events-in-jsx\"><app-icon name=\"link\"></app-icon>\n  Using events in JSX\n  </a>\n</h2>\n<p>Within a stencil compiled application or component you can also bind listeners to events directly in JSX. This works very similar to normal DOM events such as <code>onClick</code>.</p>\n<p>Lets use our TodoList component from above:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Event<span class=\"token punctuation\">,</span> EventEmitter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoList</span> <span class=\"token punctuation\">{</span>\n\n  @<span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> todoCompleted<span class=\"token punctuation\">:</span> EventEmitter<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">todoCompletedHandler</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">:</span> Todo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoCompleted<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <p>We can now listen to this event directly on the component in our JSX using the following syntax:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>todo-list</span> <span class=\"token attr-name\">onTodoCompleted</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ev <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n  </highlight-code-line>\n  \n<h2 id=\"listening-events-from-a-non-jsx-element\">\n  <a class=\"heading-link\" href=\"#listening-events-from-a-non-jsx-element\"><app-icon name=\"link\"></app-icon>\n  Listening events from a non-JSX element\n  </a>\n</h2>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>todo-list</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>todo-list</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n  <span class=\"token keyword\">const</span> todoListElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todo-list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  todoListElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todoCompleted'</span><span class=\"token punctuation\">,</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* your listener */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n  </highlight-code-line>\n  "}