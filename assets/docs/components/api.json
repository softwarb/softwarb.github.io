{"title":"Component","description":"Component API","url":"/docs/decorators","contributors":["manucorporat"],"headings":[{"id":"component-api","level":1,"text":"Component API"},{"id":"decorators","level":2,"text":"Decorators"},{"id":"lifecycle-hooks","level":2,"text":"Lifecycle hooks"},{"id":"rendering-methods","level":2,"text":"Rendering methods"}],"srcPath":"./src/docs/components/api.md","content":"\n<h1 id=\"component-api\">\n  \n  Component API\n  \n</h1>\n<p>The whole API provided by stencil can be condensed in a set of decorators, lifecycles hooks and rendering methods.</p>\n\n<h2 id=\"decorators\">\n  <a class=\"heading-link\" href=\"#decorators\"><app-icon name=\"link\"></app-icon>\n  Decorators\n  </a>\n</h2>\n<p>Decorators are a pure compiler-time construction used by stencil to collection all the metadata about a component, the properties, attributes and methods it might expose, the events it might emit or even the associated stylesheets.\nOnce all the metadata has been collected, all the decorators are removed from the output, so they don&#39;t incur in any runtime overhead.</p>\n<ul>\n<li><stencil-route-link  url=/docs/component#component-decorator>@Component()</stencil-route-link> declares a new web component</li>\n<li><stencil-route-link  url=/docs/properties#prop-decorator>@Prop()</stencil-route-link> declares an exposed property/attribute</li>\n<li><stencil-route-link  url=/docs/state#state-decorator>@State()</stencil-route-link> declares an internal state of the component</li>\n<li><stencil-route-link  url=/docs/reactive-data#watch-decorator>@Watch()</stencil-route-link> declares a hook that runs when a property or state changes</li>\n<li><stencil-route-link  url=/docs/host-element#element-decorator>@Element()</stencil-route-link> declared a reference to the host element</li>\n<li><stencil-route-link  url=/docs/methods#method-decorator>@Method()</stencil-route-link> declares an exposed public method</li>\n<li><stencil-route-link  url=/docs/events#event-decorator>@Event()</stencil-route-link> declares an DOM event the component might emit</li>\n<li><stencil-route-link  url=/docs/events#listen-decorator>@Listen()</stencil-route-link> listens for DOM events</li>\n</ul>\n\n<h2 id=\"lifecycle-hooks\">\n  <a class=\"heading-link\" href=\"#lifecycle-hooks\"><app-icon name=\"link\"></app-icon>\n  Lifecycle hooks\n  </a>\n</h2>\n<ul>\n<li><stencil-route-link  url=/docs/component-lifecycle>componentWillLoad()</stencil-route-link></li>\n<li><stencil-route-link  url=/docs/component-lifecycle>componentDidLoad()</stencil-route-link></li>\n<li><stencil-route-link  url=/docs/component-lifecycle>componentWillUpdate()</stencil-route-link></li>\n<li><stencil-route-link  url=/docs/component-lifecycle>componentDidUpdate()</stencil-route-link></li>\n<li><stencil-route-link  url=/docs/component-lifecycle>componentDidUnload()</stencil-route-link></li>\n</ul>\n\n<h2 id=\"rendering-methods\">\n  <a class=\"heading-link\" href=\"#rendering-methods\"><app-icon name=\"link\"></app-icon>\n  Rendering methods\n  </a>\n</h2>\n<ul>\n<li><strong><stencil-route-link  url=/docs/host-element#hostdata-method>hostData()</stencil-route-link></strong></li>\n<li><strong><a href=\"templating-jsx\">@render()</a></strong></li>\n</ul>\n"}