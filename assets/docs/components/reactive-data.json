{"title":"Reactive Data, Handling arrays and objects","description":"Reactive Data, Handling arrays and objects","url":"/docs/reactive-data","contributors":["jthoms1"],"headings":[{"id":"reactive-data","level":1,"text":"Reactive Data"},{"id":"rendering-methods","level":2,"text":"Rendering methods"},{"id":"watch-decorator","level":2,"text":"Watch Decorator"},{"id":"handling-arrays-and-objects","level":2,"text":"Handling arrays and objects"},{"id":"updating-arrays","level":3,"text":"Updating arrays"},{"id":"updating-an-object","level":3,"text":"Updating an object"}],"srcPath":"./src/docs/components/reactive-data.md","content":"\n<h1 id=\"reactive-data\">\n  \n  Reactive Data\n  \n</h1>\n<p>Stencil components update when props or state on a component change. For performance and simplicity, Stencil only compares references for changes, and will not re-render when data inside of an array or object changes.</p>\n\n<h2 id=\"rendering-methods\">\n  <a class=\"heading-link\" href=\"#rendering-methods\"><app-icon name=\"link\"></app-icon>\n  Rendering methods\n  </a>\n</h2>\n<p>When a component updates because a state change (props or state change), the <a href=\"templating-jsx\"><code>render()</code></a> and <stencil-route-link  url=/docs/host-element><code>hostData()</code></stencil-route-link> methods are scheduled to run.</p>\n\n<h2 id=\"watch-decorator\">\n  <a class=\"heading-link\" href=\"#watch-decorator\"><app-icon name=\"link\"></app-icon>\n  Watch Decorator\n  </a>\n</h2>\n<p>When a user updates a property, <code>Watch</code> will fire what ever method it&#39;s attached to and pass that method the new value of the prop along with the old value. <code>Watch</code> is useful for validating props or handling side effects.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Prop<span class=\"token punctuation\">,</span> Watch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoadingIndicator</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> activated<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span> @<span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activated'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">watchHandler</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The new value of activated is: '</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  \n<h2 id=\"handling-arrays-and-objects\">\n  <a class=\"heading-link\" href=\"#handling-arrays-and-objects\"><app-icon name=\"link\"></app-icon>\n  Handling arrays and objects\n  </a>\n</h2>\n<p>To update array or object data, use the following techniques which are fast-becoming a core part of the modern JavaScript  toolbox.</p>\n\n<h3 id=\"updating-arrays\">\n  <a class=\"heading-link\" href=\"#updating-arrays\"><app-icon name=\"link\"></app-icon>\n  Updating arrays\n  </a>\n</h3>\n<p>For arrays, this means that the standard mutable array operations such as <code>push()</code> and <code>unshift()</code> won&#39;t work. Instead, non-mutable array operators such as <code>map()</code> and <code>filter()</code>, and the ES6 spread operator syntax, should be used as they return a copy of a new array.</p>\n<p>For example, to push a new item to an array, create a new array with the existing values and the new value at the end:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// our original array</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ionic'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stencil'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'webcomponents'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// update the array</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'awesomeness'</span>\n<span class=\"token punctuation\">]</span></code></pre>\n  </highlight-code-line>\n  <p>The <code>...this.items</code> syntax is a relatively new feature of JavaScript that &quot;expands&quot; the given object in place. Read more about the Spread operator <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\">here</a>.</p>\n\n<h3 id=\"updating-an-object\">\n  <a class=\"heading-link\" href=\"#updating-an-object\"><app-icon name=\"link\"></app-icon>\n  Updating an object\n  </a>\n</h3>\n<p>The spread operator should also be used to update objects. As with arrays, mutating an object will not trigger a view update in Stencil, but returning a new copy of the object will. Below is an example:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// our original object</span>\n<span class=\"token keyword\">let</span> myCoolObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>first<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// update our object</span>\nmyCoolObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>myCoolObject<span class=\"token punctuation\">,</span> third<span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span> <span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  "}