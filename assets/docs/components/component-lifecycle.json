{"title":"Component Lifecycle Methods","description":"Component Lifecycle Methods","url":"/docs/component-lifecycle","contributors":["jthoms1"],"headings":[{"id":"component-lifecycle-methods","level":1,"text":"Component Lifecycle Methods"},{"id":"rendering-state","level":2,"text":"Rendering State"},{"id":"lifecycle-hierarchy","level":2,"text":"Lifecycle Hierarchy"},{"id":"async-lifecycle-methods","level":2,"text":"Async Lifecycle Methods"},{"id":"example","level":2,"text":"Example"}],"srcPath":"./src/docs/components/component-lifecycle.md","content":"\n<h1 id=\"component-lifecycle-methods\">\n  \n  Component Lifecycle Methods\n  \n</h1>\n<p>Components have numerous lifecycle methods which can be used to know when the component &quot;will&quot; and &quot;did&quot; load, update, and unload. These methods can be added to a component to hook into operations at the right time.</p>\n<p>Implement one of the following methods within a component class and Stencil will automatically call them in the right order:</p>\n<svg viewbox=\"0 0 643 774\" xmlns=\"http://www.w3.org/2000/svg\" style=\"margin: 60px 0;\">\n  <g fill=\"none\" fill-rule=\"evenodd\">\n    <path d=\"M552 576a90 90 0 0 0 90-90V165c0-58.5-47.2-106-105.5-106A105.8 105.8 0 0 0 431 165l.4 136.5v136\" stroke=\"#B3B6C5\" stroke-linecap=\"square\"/>\n    <path stroke=\"#B3B6C5\" d=\"M437.6 432.3l-6.3 6.3-6.3-6.3\"/>\n    <path d=\"M126.4 19.5v419\" stroke=\"#B3B6C5\" stroke-linecap=\"square\"/>\n    <path stroke=\"#B3B6C5\" d=\"M132.6 432.3l-6.3 6.3-6.3-6.3\"/>\n    <path d=\"M290.3 628.5v82\" stroke=\"#B3B6C5\" stroke-linecap=\"square\"/>\n    <path stroke=\"#B3B6C5\" d=\"M296.6 704.3l-6.3 6.3-6.3-6.3\"/>\n    <rect fill=\"#FDF5E4\" x=\"1\" y=\"550\" width=\"555\" height=\"50\" rx=\"4\"/>\n    <rect fill=\"#FDF5E4\" x=\"1\" y=\"611\" width=\"555\" height=\"50\" rx=\"4\"/>\n    <rect fill=\"#FDF5E4\" width=\"252\" height=\"50\" rx=\"4\"/>\n    <rect fill=\"#212431\" y=\"452\" width=\"252\" height=\"49\" rx=\"24.5\"/>\n    <rect fill=\"#212431\" x=\"303\" y=\"452\" width=\"252\" height=\"49\" rx=\"24.5\"/>\n    <rect fill=\"#212431\" x=\"303\" y=\"229\" width=\"252\" height=\"49\" rx=\"24.5\"/>\n    <rect fill=\"#212431\" x=\"164\" y=\"725\" width=\"252\" height=\"49\" rx=\"24.5\"/>\n    <rect fill=\"#212431\" x=\"303\" y=\"169\" width=\"252\" height=\"49\" rx=\"24.5\"/>\n    <text font-size=\"14\" letter-spacing=\"-.2\" fill=\"#9A6400\">\n      <tspan x=\"57\" y=\"30\">Component initialized</tspan>\n    </text>\n    <text font-family=\"SFMono-Regular, SF Mono, Lucida Console, monospace\" font-size=\"15\" fill=\"#FFF\">\n      <tspan x=\"43\" y=\"482\">componentDidLoad()</tspan>\n    </text>\n    <text font-family=\"SFMono-Regular, SF Mono, Lucida Console, monospace\" font-size=\"15\" fill=\"#FFF\">\n      <tspan x=\"336.3\" y=\"482\">componentDidUpdate()</tspan>\n    </text>\n    <text font-family=\"SFMono-Regular, SF Mono, Lucida Console, monospace\" font-size=\"15\" fill=\"#FFF\">\n      <tspan x=\"332.1\" y=\"259\">componentWillUpdate()</tspan>\n    </text>\n    <text font-family=\"SFMono-Regular, SF Mono, Lucida Console, monospace\" font-size=\"15\" fill=\"#FFF\">\n      <tspan x=\"198.3\" y=\"754\">componentDidUnload()</tspan>\n    </text>\n    <text font-family=\"SFMono-Regular, SF Mono, Lucida Console, monospace\" font-size=\"15\" fill=\"#FFF\">\n      <tspan x=\"346\" y=\"198\">@Watch(‘propName’)</tspan>\n    </text>\n    <text font-size=\"14\" letter-spacing=\"-.2\" fill=\"#9A6400\">\n      <tspan x=\"110.8\" y=\"580\">Change in a value of prop or state triggers re-render</tspan>\n    </text>\n    <text font-size=\"14\" letter-spacing=\"-.2\" fill=\"#9A6400\">\n      <tspan x=\"211.7\" y=\"640\">Component removed</tspan>\n    </text>\n    <rect fill=\"#39B54A\" y=\"342\" width=\"555\" height=\"49\" rx=\"24.5\"/>\n    <text font-family=\"SFMono-Regular, SF Mono, Lucida Console, monospace\" font-size=\"15\" fill=\"#FFF\">\n      <tspan x=\"240.4\" y=\"371\">render()</tspan>\n    </text>\n    <rect fill=\"#212431\" y=\"63\" width=\"252\" height=\"49\" rx=\"24.5\"/>\n    <text font-family=\"SFMono-Regular, SF Mono, Lucida Console, monospace\" font-size=\"15\" fill=\"#FFF\">\n      <tspan x=\"38.4\" y=\"92\">componentWillLoad()</tspan>\n    </text>\n  </g>\n</svg>\n\n\n<h2 id=\"rendering-state\">\n  <a class=\"heading-link\" href=\"#rendering-state\"><app-icon name=\"link\"></app-icon>\n  Rendering State\n  </a>\n</h2>\n<p>It&#39;s always recommended to make any rendered state updates within <code>componentWillLoad()</code> or <code>componentWillUpdate()</code>, since these are the methods which get called <em>before</em> the <code>render()</code> method. Alternatively, updating rendered state with the <code>componentDidLoad()</code> or <code>componentDidUpdate()</code> methods will cause another re-render, which isn&#39;t ideal for performance.</p>\n<p>If state <em>must</em> be updated in <code>componentDidUpdate()</code>, it has the potential of getting components stuck in an infinite loop. If updating state within <code>componentDidUpdate()</code> is unavoidable, then the method should also come with a way to detect if the props or state is &quot;dirty&quot; or not (is the data actually different or is it the same as before). By doing a dirty check, <code>componentDidUpdate()</code> is able to avoid rendering the same data, and which in turn calls <code>componentDidUpdate()</code> again.</p>\n\n<h2 id=\"lifecycle-hierarchy\">\n  <a class=\"heading-link\" href=\"#lifecycle-hierarchy\"><app-icon name=\"link\"></app-icon>\n  Lifecycle Hierarchy\n  </a>\n</h2>\n<p>A useful feature of lifecycle methods is that they take their child component&#39;s lifecycle into consideration too. For example, if the parent component, <code>cmp-a</code>, has a child component, <code>cmp-b</code>, then <code>cmp-a</code> isn&#39;t considered &quot;loaded&quot; until <code>cmp-b</code> has finished loading. Another way to put it is that the deepest components finish loading first, then the <code>componentDidLoad()</code> calls bubble up.</p>\n<p>It&#39;s also important to note that even though Stencil can lazy-load components, and has asynchronous rendering, the lifecycle methods are still called in the correct order. So while the top-level component could have already been loaded, all of its lifecycle methods are still called in the correct order, which means it&#39;ll wait for a child components to finish loading. The same goes for the exact opposite, where the child components may already be ready while the parent isn&#39;t.</p>\n<p>In the example below we have a simple hierarchy of components. The numbered list shows the order of which the lifecycle methods will fire.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-markup\"><code class=\"language-markup\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cmp-a</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cmp-b</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cmp-c</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cmp-c</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cmp-b</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cmp-a</span><span class=\"token punctuation\">></span></span></code></pre>\n  </highlight-code-line>\n  <ol>\n<li><code>cmp-a</code> - <code>componentWillLoad()</code></li>\n<li><code>cmp-b</code> - <code>componentWillLoad()</code></li>\n<li><code>cmp-c</code> - <code>componentWillLoad()</code></li>\n<li><code>cmp-c</code> - <code>componentDidLoad()</code></li>\n<li><code>cmp-b</code> - <code>componentDidLoad()</code></li>\n<li><code>cmp-a</code> - <code>componentDidLoad()</code></li>\n</ol>\n<p>Even if some components may or may not be already loaded, the entire component hierarchy waits on its child components to finish loading and rendering.</p>\n\n<h2 id=\"async-lifecycle-methods\">\n  <a class=\"heading-link\" href=\"#async-lifecycle-methods\"><app-icon name=\"link\"></app-icon>\n  Async Lifecycle Methods\n  </a>\n</h2>\n<p>Lifecycle methods can also return promises which allows the method to asynchronously retrieve data or perform any async tasks. A great example of this is fetching data to be rendered in a component. For example, this very site you&#39;re reading first fetches content data before rendering. But because <code>fetch()</code> is async, it&#39;s important that <code>componentWillLoad()</code> returns a <code>Promise</code> to ensure its parent component isn&#39;t considered &quot;loaded&quot; until all of its content has rendered.</p>\n<p>Below is a quick example showing how <code>componentWillLoad()</code> is able to have its parent component wait on it to finish loading its data.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">componentWillLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/some-data.json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  \n<h2 id=\"example\">\n  <a class=\"heading-link\" href=\"#example\"><app-icon name=\"link\"></app-icon>\n  Example\n  </a>\n</h2>\n<p>This simple example shows a clock and updates the current time every second. Since <code>componentDidLoad</code> is only called once, we will only ever have one instance of the timer running. Once the component unloads, the timer is stopped.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> State <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  tag<span class=\"token punctuation\">:</span> <span class=\"token string\">'custom-clock'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomClock</span> <span class=\"token punctuation\">{</span>\n\n  timer<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  @<span class=\"token function\">State</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidUnload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span> time <span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <blockquote>\n<p>Here is the example running.  If you want to see it in action then just inspect it with dev tools.\n<custom-clock/></p>\n</blockquote>\n"}