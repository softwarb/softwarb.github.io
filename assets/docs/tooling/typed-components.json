{"title":"Typed Components","description":"Typed Components","url":"/docs/typed-components","contributors":["adamdbradley","manucorporat"],"headings":[{"id":"typed-components","level":1,"text":"Typed Components"},{"id":"properties","level":2,"text":"Properties"},{"id":"required-properties","level":3,"text":"Required properties"}],"srcPath":"./src/docs/tooling/typed-components.md","content":"\n<h1 id=\"typed-components\">\n  \n  Typed Components\n  \n</h1>\n<p>Web Components generated with stencil come with typing information automatically generated by the Stencil compiler. Typescript declarations provide strong guaranties when consuming components:</p>\n<ul>\n<li>Ensuring that proper values are passed down as properties</li>\n<li>Code autocompletion in modern IDEs such as Atom and VSCode</li>\n<li>Events&#39; details</li>\n<li>Signature of components&#39; methods</li>\n</ul>\n<p>This public types are automatically generated by Stencil in <code>src/component.d.ts</code>, which allows for strong typing in JSX (just like React) and <code>HTMLElement</code> interfaces for each component.</p>\n<p>Because Web Components generated by Stencil are just vanilla Web Components, they extend the <code>HTMLElement</code> interface. For each component a type named <code>HTML{CamelCaseTag}Element</code> is registered at the global scope, meaning developers DO NOT have to import them explicitly, just like <code>HTMLElement</code> or <code>HTMLScriptElement</code> are not imported.</p>\n<ul>\n<li><code>ion-button</code> =&gt; <code>HTMLIonButtonElement</code></li>\n<li><code>ion-menu-controller</code> =&gt; <code>HTMLIonMenuControllerElement</code></li>\n</ul>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> button<span class=\"token punctuation\">:</span> HTMLIonButtonElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">queryElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ion-button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span>fill <span class=\"token operator\">=</span> <span class=\"token string\">'outline'</span><span class=\"token punctuation\">;</span></code></pre>\n  </highlight-code-line>\n  <p><strong>IMPORTANT</strong>: always use the <code>HTML{}Element</code> interfaces in order to hold references to components.</p>\n\n<h2 id=\"properties\">\n  <a class=\"heading-link\" href=\"#properties\"><app-icon name=\"link\"></app-icon>\n  Properties\n  </a>\n</h2>\n<p>Component properties and attributes are defined by annotating an instance variable with the\n<code>@Prop()</code> decorator:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\">@<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> prop<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></code></pre>\n  </highlight-code-line>\n  <p>Stencil also <strong>uses the type information</strong> in order to generate the Web Component types and automatically cast the values to the specified type at runtime**:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\">@<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> str1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string attribute</span>\n@<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> str2<span class=\"token punctuation\">:</span> <span class=\"token string\">'md'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'ios'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string attribute</span>\n@<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> str3 <span class=\"token operator\">=</span> <span class=\"token string\">'defaultValue'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string attribute</span>\n\n@<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> number1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// numeric attribute</span>\n@<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> number2 <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// numeric attribute</span>\n\n@<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> boolean1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// boolean attribute</span>\n@<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> boolean2 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// boolean attribute</span></code></pre>\n  </highlight-code-line>\n  \n<h3 id=\"required-properties\">\n  <a class=\"heading-link\" href=\"#required-properties\"><app-icon name=\"link\"></app-icon>\n  Required properties\n  </a>\n</h3>\n<p>Using <code>!</code> after the variable name, will mark this attribute/property as required, this way the JSX types will ensure\nthe property is passed out.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\">@<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> value<span class=\"token operator\">!</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></code></pre>\n  </highlight-code-line>\n  "}