{"title":"Docs Auto-Generation","description":"Docs Auto-Generation","url":"/docs/docs-auto-generation","contributors":["adamdbradley","snaptopixel","manucorporat"],"headings":[{"id":"docs-auto-generation","level":1,"text":"Docs Auto-Generation"},{"id":"readme-markdown-files","level":2,"text":"Readme Markdown Files"},{"id":"adding-custom-markdown-to-auto-generated-files","level":3,"text":"Adding Custom Markdown to Auto-Generated Files"},{"id":"docs-json-data","level":2,"text":"Docs Json Data"},{"id":"documenting-css-variables","level":2,"text":"Documenting CSS Variables"}],"srcPath":"./src/docs/tooling/docs-auto-generation.md","content":"\n<h1 id=\"docs-auto-generation\">\n  \n  Docs Auto-Generation\n  \n</h1>\n<p>As apps scale with more and more components, and team size and members continue to adjust over time, it&#39;s vital all components are well documented, and that the documentation itself is maintained. Maintaining documentation is right up there for some of the least interesting things developers must do, but that doesn&#39;t mean it can&#39;t be made easier.</p>\n<p>Throughout the build process, the compiler is able to extract documentation from each component, to include JSDocs comments and types of each member on the component (thanks TypeScript!).</p>\n\n<h2 id=\"readme-markdown-files\">\n  <a class=\"heading-link\" href=\"#readme-markdown-files\"><app-icon name=\"link\"></app-icon>\n  Readme Markdown Files\n  </a>\n</h2>\n<p>Stencil is able to auto-generate <code>readme.md</code> files in markdown. This is an opt-in feature and will save the readme files as a sibling to the component within the same directory. When this feature is used it can be useful for others to easily find and read formatted docs about one component. In particular, when a <code>readme.md</code> file is placed within a directory on Github, it will default the readme markdown file as the primary content of the page.</p>\n<p>To auto-generate readme files, add the <code>docs</code> output target to your <code>stencil.config.ts</code>:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Config <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> config<span class=\"token punctuation\">:</span> Config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  outputTargets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n<span class=\"token operator\">+</span>    <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'docs'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n  </highlight-code-line>\n  <p>Another option would be to add the flag <code>--docs</code>, such as:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code class=\"language-bash\">stencil build --docs</code></pre>\n  </highlight-code-line>\n  \n<h3 id=\"adding-custom-markdown-to-auto-generated-files\">\n  <a class=\"heading-link\" href=\"#adding-custom-markdown-to-auto-generated-files\"><app-icon name=\"link\"></app-icon>\n  Adding Custom Markdown to Auto-Generated Files\n  </a>\n</h3>\n<p>Once you&#39;ve generated a <code>readme.md</code> file you can customize it with your own markdown content. Simply add your own markdown above the comment that reads: <code>&lt;!-- Auto Generated Below --&gt;</code>.</p>\n\n<h2 id=\"docs-json-data\">\n  <a class=\"heading-link\" href=\"#docs-json-data\"><app-icon name=\"link\"></app-icon>\n  Docs Json Data\n  </a>\n</h2>\n<p>While auto-generated readme files formatted with markdown is convenient, there may be scenarios it&#39;d be getter to get all of the docs in the form of json data. To build the docs as json, use the <code>--docs-json</code> flag, followed by a path on where to write the json file.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\">  scripts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"docs.data\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"stencil build --docs-json path/to/docs.json\"</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <p>Another option would be to add the <code>docs-json</code> output target to the <code>stencil.config.ts</code> in order to auto-generate this file with every build:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Config <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> config<span class=\"token punctuation\">:</span> Config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  outputTargets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n<span class=\"token operator\">+</span>    <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'docs-json'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n  </highlight-code-line>\n  <p>Check out the typescript declarations for the JSON output: <a href=\"https://github.com/ionic-team/stencil/blob/master/src/declarations/docs.ts\">https://github.com/ionic-team/stencil/blob/master/src/declarations/docs.ts</a></p>\n\n<h2 id=\"documenting-css-variables\">\n  <a class=\"heading-link\" href=\"#documenting-css-variables\"><app-icon name=\"link\"></app-icon>\n  Documenting CSS Variables\n  </a>\n</h2>\n<p>Stencil will also document CSS variables when you specify them via jsdoc-style comments inside your css/scss files:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/**\n * @prop --background: Background of the button\n * @prop --background-activated: Background of the button when activated\n * @prop --background-focused: Background of the button when focused\n */</span></code></pre>\n  </highlight-code-line>\n  "}