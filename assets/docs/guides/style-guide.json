{"title":"Stencil Style Guide","description":"Stencil Style Guide","url":"/docs/style-guide","contributors":["jthoms1"],"headings":[{"id":"stencil-style-guide","level":1,"text":"Stencil Style Guide"},{"id":"file-structure","level":2,"text":"File structure"},{"id":"naming","level":2,"text":"Naming"},{"id":"html-tag","level":3,"text":"HTML tag"},{"id":"prefix","level":4,"text":"Prefix"},{"id":"name","level":4,"text":"Name"},{"id":"modifiers","level":4,"text":"Modifiers"},{"id":"component-ts-class-","level":3,"text":"Component (TS class)"},{"id":"typescript","level":2,"text":"TypeScript"},{"id":"code-organization","level":2,"text":"Code organization"},{"id":"high-level-example-commented-","level":3,"text":"High level example (commented)"}],"srcPath":"./src/docs/guides/style-guide.md","content":"\n<h1 id=\"stencil-style-guide\">\n  \n  Stencil Style Guide\n  \n</h1>\n<p>This is a component style guide created and enforced internally by the core team of Stencil, for the purpose of standardizing <a href=\"https://ionicframework.com/\">Ionic Core</a> components. This should only be used as a reference for other teams in creating their own style guides. Feel free to modify to your team&#39;s own preference.</p>\n\n<h2 id=\"file-structure\">\n  <a class=\"heading-link\" href=\"#file-structure\"><app-icon name=\"link\"></app-icon>\n  File structure\n  </a>\n</h2>\n<ul>\n<li>One component per file.</li>\n<li>One component per directory. Though it may make sense to group similar components into the same directory, we&#39;ve found it&#39;s easier to document components when each one has its own directory.</li>\n<li>Implementation (.tsx) and styles of a component should live in the same directory.</li>\n</ul>\n<p>Example from ionic-core:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code class=\"language-bash\">├── card\n│   ├── card.ios.css\n│   ├── card.md.css\n│   ├── card.css\n│   ├── card.tsx\n│   └── <span class=\"token function\">test</span>\n│       └── basic\n│           ├── e2e.js\n│           └── index.html\n├── card-content\n│   ├── card-content.ios.css\n│   ├── card-content.md.css\n│   ├── card-content.css\n│   └── card-content.tsx\n├── card-title\n│   ├── card-title.ios.css\n│   ├── card-title.md.css\n│   ├── card-title.css</code></pre>\n  </highlight-code-line>\n  \n<h2 id=\"naming\">\n  <a class=\"heading-link\" href=\"#naming\"><app-icon name=\"link\"></app-icon>\n  Naming\n  </a>\n</h2>\n\n<h3 id=\"html-tag\">\n  <a class=\"heading-link\" href=\"#html-tag\"><app-icon name=\"link\"></app-icon>\n  HTML tag\n  </a>\n</h3>\n\n<h4 id=\"prefix\">\n  <a class=\"heading-link\" href=\"#prefix\"><app-icon name=\"link\"></app-icon>\n  Prefix\n  </a>\n</h4>\n<p>The prefix has a major role when you are creating a collection of components intended to be used across different projects, like <a href=\"https://www.npmjs.com/package/@ionic/core\">@ionic/core</a>. Web Components are not scoped because they are globally declared within the webpage, which means an &quot;unique&quot; prefix is needed to prevent collisions. The prefix is also able help to quickly identify the collection of an component. Additionally, web components are required to contain a &quot;-&quot; dash within the tag name, so using the first section to namespace your components is a natural fit.</p>\n<p>We do not recommend using &quot;stencil&quot; as prefix, since Stencil DOES NOT emit stencil components, but rather the output is standards compliant web components.</p>\n<p>DO NOT do this:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stencil-component</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stnl-component</span><span class=\"token punctuation\">></span></span></code></pre>\n  </highlight-code-line>\n  <p>Instead, use your own naming or brand. For example, <a href=\"https://ionicframework.com/\">Ionic</a> components are all prefixed with <code>ion-</code>.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-header</span><span class=\"token punctuation\">></span></span></code></pre>\n  </highlight-code-line>\n  \n<h4 id=\"name\">\n  <a class=\"heading-link\" href=\"#name\"><app-icon name=\"link\"></app-icon>\n  Name\n  </a>\n</h4>\n<p>Components are not actions, they are conceptually &quot;things&quot;. It is better to use nouns, instead of verbs, such us: &quot;animation&quot; instead of &quot;animating&quot;. &quot;input&quot;, &quot;tab&quot;, &quot;nav&quot;, &quot;menu&quot; are some examples.</p>\n\n<h4 id=\"modifiers\">\n  <a class=\"heading-link\" href=\"#modifiers\"><app-icon name=\"link\"></app-icon>\n  Modifiers\n  </a>\n</h4>\n<p>When several components are related and/or coupled, it is a good idea to share the name, and then add different modifiers, for example:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-card</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-card-header</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-card-content</span><span class=\"token punctuation\">></span></span></code></pre>\n  </highlight-code-line>\n  \n<h3 id=\"component-ts-class-\">\n  <a class=\"heading-link\" href=\"#component-ts-class-\"><app-icon name=\"link\"></app-icon>\n  Component (TS class)\n  </a>\n</h3>\n<p>The name of the ES6 class of the components SHOULD NOT have prefix since classes are scoped. There is no risk of collision.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  tag<span class=\"token punctuation\">:</span> <span class=\"token string\">'ion-button'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  tag<span class=\"token punctuation\">:</span> <span class=\"token string\">'ion-menu'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Menu</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  \n<h2 id=\"typescript\">\n  <a class=\"heading-link\" href=\"#typescript\"><app-icon name=\"link\"></app-icon>\n  TypeScript\n  </a>\n</h2>\n<ol>\n<li><p><strong>Follow</strong> <a href=\"https://github.com/ionic-team/tslint-ionic-rules/blob/master/tslint.js\">tslint-ionic-rules</a></p>\n</li>\n<li><p><strong>Variable decorators should be inlined.</strong></p>\n</li>\n</ol>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\">@<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n@<span class=\"token function\">Element</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> el<span class=\"token punctuation\">:</span> HTMLElement<span class=\"token punctuation\">;</span></code></pre>\n  </highlight-code-line>\n  <ol start=\"3\">\n<li><strong>Method decorator should be multi-line</strong></li>\n</ol>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\">@<span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <ol start=\"4\">\n<li><p><strong>Use private variables and methods as much possible:</strong> They are useful to detect deadcode and enforce encapsulation. Note that this is a feature which TypeScript provides to help harden your code, but using <code>private</code>, <code>public</code> or <code>protected</code> does not make a difference in the actual JavaScript output.</p>\n</li>\n<li><p><strong>Code with Method/Prop/Event/Component decorators should have jsdocs:</strong> This allows for documentation generation and for better user experience in an editor that has TypeScript intellisense</p>\n</li>\n</ol>\n\n<h2 id=\"code-organization\">\n  <a class=\"heading-link\" href=\"#code-organization\"><app-icon name=\"link\"></app-icon>\n  Code organization\n  </a>\n</h2>\n<p><strong>Newspaper Metaphor from The Robert C. Martin&#39;s <em>Clean Code</em></strong></p>\n<blockquote>\n<p>The source file should be organized like a newspaper article, with the highest level summary at the top, and more and more details further down. Functions called from the top function come directly below it, and so on down to the lowest level and most detailed functions at the bottom. This is a good way to organize the source code, even though IDE:s make the location of functions less important, since it is so easy to navigate in and out of them.</p>\n</blockquote>\n\n<h3 id=\"high-level-example-commented-\">\n  <a class=\"heading-link\" href=\"#high-level-example-commented-\"><app-icon name=\"link\"></app-icon>\n  High level example (commented)\n  </a>\n</h3>\n\n  <highlight-code-line >\n    <pre class=\"language-tsx\"><code class=\"language-tsx\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  tag<span class=\"token punctuation\">:</span> <span class=\"token string\">'ion-something'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    ios<span class=\"token punctuation\">:</span> <span class=\"token string\">'something.ios.css'</span><span class=\"token punctuation\">,</span>\n    md<span class=\"token punctuation\">:</span> <span class=\"token string\">'something.md.css'</span><span class=\"token punctuation\">,</span>\n    wp<span class=\"token punctuation\">:</span> <span class=\"token string\">'something.wp.css'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Something</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">/**\n   * 1. Own Properties\n   * Always set the type if a default value has not\n   * been set. If a default value is being set, then type\n   * is already inferred. List the own properties in\n   * alphabetical order. Note that because these properties\n   * do not have the @Prop() decorator, they will not be exposed\n   * publicly on the host element, but only used internally.\n   */</span>\n  num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  someText <span class=\"token operator\">=</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * 2. Reference to host HTML element.\n   * Inlined decorator\n   */</span>\n  @<span class=\"token function\">Element</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> el<span class=\"token punctuation\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * 3. State() variables\n   * Inlined decorator, alphabetical order.\n   */</span>\n  @<span class=\"token function\">State</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> isValidated<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">State</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> status <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * 4. Public Property API\n   * Inlined decorator, alphabetical order. These are\n   * different than \"own properties\" in that public props\n   * are exposed as properties and attributes on the host element.\n   * Requires JSDocs for public API documentation.\n   */</span>\n  @<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> content<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> enabled<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> menuId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> <span class=\"token string\">'overlay'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * Prop lifecycle events SHOULD go just behind the Prop they listen to.\n   * This makes sense since both statements are strongly connected.\n   * - If renaming the instance variable name you must also update the name in @Watch()\n   * - Code is easier to follow and maintain.\n   */</span>\n  @<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> swipeEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  @<span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'swipeEnabled'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">swipeEnabledChanged</span><span class=\"token punctuation\">(</span>newSwipeEnabled<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span> oldSwipeEnabled<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * 5. Events section\n   * Inlined decorator, alphabetical order.\n   * Requires JSDocs for public API documentation.\n   */</span>\n  @<span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> ionClose<span class=\"token punctuation\">:</span> EventEmitter<span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> ionDrag<span class=\"token punctuation\">:</span> EventEmitter<span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> ionOpen<span class=\"token punctuation\">:</span> EventEmitter<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * 6. Component lifecycle events\n   * Ordered by their natural call order, for example\n   * WillLoad should go before DidLoad.\n   */</span>\n  <span class=\"token function\">componentWillLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentWillUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token function\">componentDidUnload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * 7. Listeners\n   * It is ok to place them in a different location\n   * if makes more sense in the context. Recommend\n   * starting a listener method with \"on\".\n   * Always use two lines.\n   */</span>\n  @<span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> enabled<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">:</span> UIEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * 8. Public methods API\n   * These methods are exposed on the host element.\n   * Always use two lines.\n   * Requires JSDocs for public API documentation.\n   */</span>\n  @<span class=\"token function\">Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n\n  @<span class=\"token function\">Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * 9. Local methods\n   * Internal business logic. These methods cannot be\n   * called from the host element.\n   */</span>\n  <span class=\"token function\">prepareAnimation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>void</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * 10. hostData() function\n   * Used to dynamically set host element attributes.\n   * Should be placed directly above render()\n   */</span>\n  <span class=\"token function\">hostData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      attribute<span class=\"token punctuation\">:</span> <span class=\"token string\">'navigation'</span><span class=\"token punctuation\">,</span>\n      side<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isRightSide <span class=\"token operator\">?</span> <span class=\"token string\">'right'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'left'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'something-is-animating'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isAnimating\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * 11. render() function\n   * Always the last one in the class.\n   */</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>menu-inner page-inner<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  "}